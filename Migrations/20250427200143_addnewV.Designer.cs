// <auto-generated />
using System;
using ECommerceWebsite.Models.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceWebsite.Migrations
{
    [DbContext(typeof(ECommerceProjectContext))]
    [Migration("20250427200143_addnewV")]
    partial class addnewV
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Cart", b =>
                {
                    b.Property<int>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartID"));

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CartID")
                        .HasName("PK__Carts__51BCD797A42C199D");

                    b.HasIndex(new[] { "UserID" }, "UQ__Carts__1788CCAD49C77279")
                        .IsUnique()
                        .HasFilter("([UserID] IS NOT NULL)");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.CartItem", b =>
                {
                    b.Property<int>("CartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemID"));

                    b.Property<int?>("CartID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemID")
                        .HasName("PK__CartItem__488B0B2AF47B73D8");

                    b.HasIndex(new[] { "CartID" }, "IX_CartItems_CartID");

                    b.HasIndex(new[] { "ProductID" }, "IX_CartItems_ProductID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("CategoryID")
                        .HasName("PK__Categori__19093A2B121DE7BE");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID")
                        .HasName("PK__Orders__C3905BAFE2BD8432");

                    b.HasIndex(new[] { "UserID" }, "IX_Orders_UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("OrderItemID")
                        .HasName("PK__OrderIte__57ED06A1DEDBFCEB");

                    b.HasIndex(new[] { "OrderID" }, "IX_OrderItems_OrderID");

                    b.HasIndex(new[] { "ProductID" }, "IX_OrderItems_ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PaymentID")
                        .HasName("PK__Payments__9B556A58BEF768F2");

                    b.HasIndex(new[] { "OrderID" }, "IX_Payments_OrderID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InSection")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID")
                        .HasName("PK__Products__B40CC6ED716A7843");

                    b.HasIndex(new[] { "CategoryID" }, "IX_Products_CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__ProductI__3214EC07137477A6");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductImages_ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.ProductPosition_Table", b =>
                {
                    b.Property<string>("ProductPosition")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<int?>("ProductPositionNumber")
                        .HasColumnType("int");

                    b.ToTable("ProductPosition_Table");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID")
                        .HasName("PK__Reviews__74BC79AE00711F20");

                    b.HasIndex(new[] { "ProductID" }, "IX_Reviews_ProductID");

                    b.HasIndex(new[] { "UserID" }, "IX_Reviews_UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Users__1788CCACFE0E8827");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Cart", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ECommerceWebsite.Models.DB.Cart", "UserID")
                        .HasConstraintName("FK__Carts__UserID__48CFD27E");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.CartItem", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartID")
                        .HasConstraintName("FK__CartItems__CartI__4BAC3F29");

                    b.HasOne("ECommerceWebsite.Models.DB.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK__CartItems__Produ__4CA06362");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Order", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK__Orders__UserID__412EB0B6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.OrderItem", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .HasConstraintName("FK__OrderItem__Order__440B1D61");

                    b.HasOne("ECommerceWebsite.Models.DB.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK__OrderItem__Produ__44FF419A");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Payment", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderID")
                        .HasConstraintName("FK__Payments__OrderI__5070F446");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Product", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK__Products__Catego__3D5E1FD2");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.ProductImage", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImages_Products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Review", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK__Reviews__Product__5629CD9C");

                    b.HasOne("ECommerceWebsite.Models.DB.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK__Reviews__UserID__5535A963");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.User", b =>
                {
                    b.HasOne("ECommerceWebsite.Models.DB.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommerceWebsite.Models.DB.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
